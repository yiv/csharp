// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msgpb {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SBW1zZ3BiIhgKBUZyYW1lEg8KB3BheWxvYWQYASABKAwi",
            "GQoITG9naW5SZXESDQoFdG9rZW4YASABKAkiGAoITG9naW5SZXMSDAoEY29k",
            "ZRgBIAEoBSIOCgxIZWFydEJlYXRSZXEiKwoMSGVhcnRCZWF0UmVzEgwKBGNv",
            "ZGUYASABKAUSDQoFbXRpbWUYAiABKAMiGQoKQ29ubmVjdFJlcRILCgN1aWQY",
            "ASABKAMiKwoKQ29ubmVjdFJlcxIMCgRjb2RlGAEgASgFEg8KB2ZyaWVuZHMY",
            "AiADKAMiOwoKTWVzc2FnZVJlcRILCgNkc3QYASABKAMSDwoHbXNndHlwZRgC",
            "IAEoBRIPCgdjb250ZW50GAMgASgJIhoKCk1lc3NhZ2VSZXMSDAoEY29kZRgB",
            "IAEoBSKwAQoNSW5mb3JtTWVzc2FnZRIPCgdtc2d0eXBlGAEgASgFEgsKA3Ny",
            "YxgCIAEoAxIMCgRuaWNrGAMgASgJEg0KBWxldmVsGAQgASgFEg8KB3ZpcHR5",
            "cGUYBSABKAUSDwoHY29udGVudBgGIAEoCRINCgVjdGltZRgHIAEoAxIRCglj",
            "aGFyYWN0ZXIYCCABKAMSDgoGYXZhdGFyGAkgASgJEhAKCHZpcGxldmVsGAog",
            "ASgFIjgKDkluZm9ybVRyYW5zZmVyEgsKA3NyYxgBIAEoAxIMCgRuaWNrGAIg",
            "ASgJEgsKA2FtdBgDIAEoAyJ+ChJJbmZvcm1TeXNCcm9hZGNhc3QSDwoHbXNn",
            "dHlwZRgBIAEoBRILCgN1aWQYAiABKAMSDAoEbmljaxgDIAEoCRIOCgZvbmxp",
            "bmUYBCABKAUSDAoEY29pbhgFIAEoAxIPCgdjb250ZW50GA4gASgJEg0KBWN0",
            "aW1lGA8gASgDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.Frame), global::Msgpb.Frame.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.LoginReq), global::Msgpb.LoginReq.Parser, new[]{ "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.LoginRes), global::Msgpb.LoginRes.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.HeartBeatReq), global::Msgpb.HeartBeatReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.HeartBeatRes), global::Msgpb.HeartBeatRes.Parser, new[]{ "Code", "Mtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.ConnectReq), global::Msgpb.ConnectReq.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.ConnectRes), global::Msgpb.ConnectRes.Parser, new[]{ "Code", "Friends" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.MessageReq), global::Msgpb.MessageReq.Parser, new[]{ "Dst", "Msgtype", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.MessageRes), global::Msgpb.MessageRes.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.InformMessage), global::Msgpb.InformMessage.Parser, new[]{ "Msgtype", "Src", "Nick", "Level", "Viptype", "Content", "Ctime", "Character", "Avatar", "Viplevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.InformTransfer), global::Msgpb.InformTransfer.Parser, new[]{ "Src", "Nick", "Amt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msgpb.InformSysBroadcast), global::Msgpb.InformSysBroadcast.Parser, new[]{ "Msgtype", "Uid", "Nick", "Online", "Coin", "Content", "Ctime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    ///登陆令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRes : pb::IMessage<LoginRes> {
    private static readonly pb::MessageParser<LoginRes> _parser = new pb::MessageParser<LoginRes>(() => new LoginRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRes(LoginRes other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRes Clone() {
      return new LoginRes(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRes other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeatReq : pb::IMessage<HeartBeatReq> {
    private static readonly pb::MessageParser<HeartBeatReq> _parser = new pb::MessageParser<HeartBeatReq>(() => new HeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq(HeartBeatReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq Clone() {
      return new HeartBeatReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class HeartBeatRes : pb::IMessage<HeartBeatRes> {
    private static readonly pb::MessageParser<HeartBeatRes> _parser = new pb::MessageParser<HeartBeatRes>(() => new HeartBeatRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRes(HeartBeatRes other) : this() {
      code_ = other.code_;
      mtime_ = other.mtime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRes Clone() {
      return new HeartBeatRes(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "mtime" field.</summary>
    public const int MtimeFieldNumber = 2;
    private long mtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Mtime {
      get { return mtime_; }
      set {
        mtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Mtime != other.Mtime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Mtime != 0L) hash ^= Mtime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Mtime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Mtime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Mtime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Mtime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRes other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Mtime != 0L) {
        Mtime = other.Mtime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Mtime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectReq : pb::IMessage<ConnectReq> {
    private static readonly pb::MessageParser<ConnectReq> _parser = new pb::MessageParser<ConnectReq>(() => new ConnectReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectReq(ConnectReq other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectReq Clone() {
      return new ConnectReq(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectReq other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectRes : pb::IMessage<ConnectRes> {
    private static readonly pb::MessageParser<ConnectRes> _parser = new pb::MessageParser<ConnectRes>(() => new ConnectRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRes(ConnectRes other) : this() {
      code_ = other.code_;
      friends_ = other.friends_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectRes Clone() {
      return new ConnectRes(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_friends_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> friends_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!friends_.Equals(other.friends_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      hash ^= friends_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      friends_.WriteTo(output, _repeated_friends_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      size += friends_.CalculateSize(_repeated_friends_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectRes other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      friends_.Add(other.friends_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageReq : pb::IMessage<MessageReq> {
    private static readonly pb::MessageParser<MessageReq> _parser = new pb::MessageParser<MessageReq>(() => new MessageReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReq(MessageReq other) : this() {
      dst_ = other.dst_;
      msgtype_ = other.msgtype_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageReq Clone() {
      return new MessageReq(this);
    }

    /// <summary>Field number for the "dst" field.</summary>
    public const int DstFieldNumber = 1;
    private long dst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Dst {
      get { return dst_; }
      set {
        dst_ = value;
      }
    }

    /// <summary>Field number for the "msgtype" field.</summary>
    public const int MsgtypeFieldNumber = 2;
    private int msgtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Msgtype {
      get { return msgtype_; }
      set {
        msgtype_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dst != other.Dst) return false;
      if (Msgtype != other.Msgtype) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dst != 0L) hash ^= Dst.GetHashCode();
      if (Msgtype != 0) hash ^= Msgtype.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dst != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Dst);
      }
      if (Msgtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Msgtype);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dst != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dst);
      }
      if (Msgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgtype);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageReq other) {
      if (other == null) {
        return;
      }
      if (other.Dst != 0L) {
        Dst = other.Dst;
      }
      if (other.Msgtype != 0) {
        Msgtype = other.Msgtype;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Dst = input.ReadInt64();
            break;
          }
          case 16: {
            Msgtype = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageRes : pb::IMessage<MessageRes> {
    private static readonly pb::MessageParser<MessageRes> _parser = new pb::MessageParser<MessageRes>(() => new MessageRes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRes(MessageRes other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageRes Clone() {
      return new MessageRes(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageRes other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InformMessage : pb::IMessage<InformMessage> {
    private static readonly pb::MessageParser<InformMessage> _parser = new pb::MessageParser<InformMessage>(() => new InformMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InformMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformMessage(InformMessage other) : this() {
      msgtype_ = other.msgtype_;
      src_ = other.src_;
      nick_ = other.nick_;
      level_ = other.level_;
      viptype_ = other.viptype_;
      content_ = other.content_;
      ctime_ = other.ctime_;
      character_ = other.character_;
      avatar_ = other.avatar_;
      viplevel_ = other.viplevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformMessage Clone() {
      return new InformMessage(this);
    }

    /// <summary>Field number for the "msgtype" field.</summary>
    public const int MsgtypeFieldNumber = 1;
    private int msgtype_;
    /// <summary>
    ///消息类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Msgtype {
      get { return msgtype_; }
      set {
        msgtype_ = value;
      }
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 2;
    private long src_;
    /// <summary>
    ///玩家UID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Src {
      get { return src_; }
      set {
        src_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 3;
    private string nick_ = "";
    /// <summary>
    ///玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "viptype" field.</summary>
    public const int ViptypeFieldNumber = 5;
    private int viptype_;
    /// <summary>
    ///玩家VIP类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Viptype {
      get { return viptype_; }
      set {
        viptype_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    ///消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ctime" field.</summary>
    public const int CtimeFieldNumber = 7;
    private long ctime_;
    /// <summary>
    ///消息时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ctime {
      get { return ctime_; }
      set {
        ctime_ = value;
      }
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 8;
    private long character_;
    /// <summary>
    /// 玩家角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 9;
    private string avatar_ = "";
    /// <summary>
    ///玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "viplevel" field.</summary>
    public const int ViplevelFieldNumber = 10;
    private int viplevel_;
    /// <summary>
    ///玩家VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Viplevel {
      get { return viplevel_; }
      set {
        viplevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InformMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InformMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgtype != other.Msgtype) return false;
      if (Src != other.Src) return false;
      if (Nick != other.Nick) return false;
      if (Level != other.Level) return false;
      if (Viptype != other.Viptype) return false;
      if (Content != other.Content) return false;
      if (Ctime != other.Ctime) return false;
      if (Character != other.Character) return false;
      if (Avatar != other.Avatar) return false;
      if (Viplevel != other.Viplevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgtype != 0) hash ^= Msgtype.GetHashCode();
      if (Src != 0L) hash ^= Src.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Viptype != 0) hash ^= Viptype.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Ctime != 0L) hash ^= Ctime.GetHashCode();
      if (Character != 0L) hash ^= Character.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (Viplevel != 0) hash ^= Viplevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgtype != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Msgtype);
      }
      if (Src != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Src);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (Viptype != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Viptype);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (Ctime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Ctime);
      }
      if (Character != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Character);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Avatar);
      }
      if (Viplevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Viplevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgtype);
      }
      if (Src != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Src);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Viptype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Viptype);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Ctime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ctime);
      }
      if (Character != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Character);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Viplevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Viplevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InformMessage other) {
      if (other == null) {
        return;
      }
      if (other.Msgtype != 0) {
        Msgtype = other.Msgtype;
      }
      if (other.Src != 0L) {
        Src = other.Src;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Viptype != 0) {
        Viptype = other.Viptype;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Ctime != 0L) {
        Ctime = other.Ctime;
      }
      if (other.Character != 0L) {
        Character = other.Character;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.Viplevel != 0) {
        Viplevel = other.Viplevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Msgtype = input.ReadInt32();
            break;
          }
          case 16: {
            Src = input.ReadInt64();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            Viptype = input.ReadInt32();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 56: {
            Ctime = input.ReadInt64();
            break;
          }
          case 64: {
            Character = input.ReadInt64();
            break;
          }
          case 74: {
            Avatar = input.ReadString();
            break;
          }
          case 80: {
            Viplevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InformTransfer : pb::IMessage<InformTransfer> {
    private static readonly pb::MessageParser<InformTransfer> _parser = new pb::MessageParser<InformTransfer>(() => new InformTransfer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InformTransfer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformTransfer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformTransfer(InformTransfer other) : this() {
      src_ = other.src_;
      nick_ = other.nick_;
      amt_ = other.amt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformTransfer Clone() {
      return new InformTransfer(this);
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 1;
    private long src_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Src {
      get { return src_; }
      set {
        src_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 2;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 3;
    private long amt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InformTransfer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InformTransfer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Src != other.Src) return false;
      if (Nick != other.Nick) return false;
      if (Amt != other.Amt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Src != 0L) hash ^= Src.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Src != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Src);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Amt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Src != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Src);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InformTransfer other) {
      if (other == null) {
        return;
      }
      if (other.Src != 0L) {
        Src = other.Src;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Src = input.ReadInt64();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 24: {
            Amt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InformSysBroadcast : pb::IMessage<InformSysBroadcast> {
    private static readonly pb::MessageParser<InformSysBroadcast> _parser = new pb::MessageParser<InformSysBroadcast>(() => new InformSysBroadcast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InformSysBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msgpb.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformSysBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformSysBroadcast(InformSysBroadcast other) : this() {
      msgtype_ = other.msgtype_;
      uid_ = other.uid_;
      nick_ = other.nick_;
      online_ = other.online_;
      coin_ = other.coin_;
      content_ = other.content_;
      ctime_ = other.ctime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformSysBroadcast Clone() {
      return new InformSysBroadcast(this);
    }

    /// <summary>Field number for the "msgtype" field.</summary>
    public const int MsgtypeFieldNumber = 1;
    private int msgtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Msgtype {
      get { return msgtype_; }
      set {
        msgtype_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 3;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private int online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 5;
    private long coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 14;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ctime" field.</summary>
    public const int CtimeFieldNumber = 15;
    private long ctime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ctime {
      get { return ctime_; }
      set {
        ctime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InformSysBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InformSysBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msgtype != other.Msgtype) return false;
      if (Uid != other.Uid) return false;
      if (Nick != other.Nick) return false;
      if (Online != other.Online) return false;
      if (Coin != other.Coin) return false;
      if (Content != other.Content) return false;
      if (Ctime != other.Ctime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msgtype != 0) hash ^= Msgtype.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      if (Coin != 0L) hash ^= Coin.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Ctime != 0L) hash ^= Ctime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msgtype != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Msgtype);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Online != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Online);
      }
      if (Coin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Coin);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Content);
      }
      if (Ctime != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(Ctime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Msgtype);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Ctime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ctime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InformSysBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.Msgtype != 0) {
        Msgtype = other.Msgtype;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
      if (other.Coin != 0L) {
        Coin = other.Coin;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Ctime != 0L) {
        Ctime = other.Ctime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Msgtype = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 32: {
            Online = input.ReadInt32();
            break;
          }
          case 40: {
            Coin = input.ReadInt64();
            break;
          }
          case 114: {
            Content = input.ReadString();
            break;
          }
          case 120: {
            Ctime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
